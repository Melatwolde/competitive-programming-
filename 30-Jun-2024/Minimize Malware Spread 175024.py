# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        initial.sort()
        def bfs(graph, s, initial):
            q = deque()
            visited = set()
            q.append(s)
            visited.add(s)
            num = 1
            company = [s]
            while q:
                cur = q.popleft()
                for j in range(len(graph)):
                    if graph[cur][j] == 1 and j not in visited:
                        if j in initial:
                            company.append(j)
                        num += 1
                        q.append(j)
                        visited.add(j)
            return num, company
        
        malware = [0]*(len(graph))
        visited = [False] * len(graph)
        for s in initial:
            if not visited[s]:
                num, company = bfs(graph,s,initial)
                if len(company) == 1:
                    malware[company[0]] = num
                else:
                    for c in company:
                        malware[c] = 0
        
        max_malware = max(malware)
        for i in initial:
            if malware[i] == max_malware:
                return i